All solutions are in Java


int addTwoDigits(int n) {
    int temp=n,sum=0;
    while(temp!=0){
        int rem=temp%10;
        sum=rem+sum;
        temp=temp/10;
    }
    return sum;
}

int largestNumber(int n) {
        int t=(int)Math.pow(10,n);
        return t-1;
}

int candies(int n, int m) {
    int t=(int)m/n;
    return t*n;
}

int seatsInTheater(int nCols, int nRows, int col, int row) {
    return ((nCols+1)-col)*(nRows-row);
}

int maxMultiple(int divisor, int bound) {
        int r=bound/divisor;
        return r*divisor;
}

int circleOfNumbers(int n, int firstNumber) {
    return firstNumber<n/2? firstNumber+n/2:firstNumber-n/2;
}


int lateRide(int n) {
    if(n%60==0)return n/60;
    else {
        int h=n%60;
        int m=n/60;
        System.out.println(n%60 +" " +n/60);
      int sum=sumdi(h)+sumdi(m);
        System.out.println(sumdi(h)+" " +sumdi(m));
        return sum;
    }  
}
int sumdi(int g){
    System.out.print(g);
    int rem=0;
    while(g!=0){
        rem+=g%10;
        g=g/10;
    }
    System.out.println(rem);
    return rem;
}

boolean reachNextLevel(int experience, int threshold, int reward) {
    if(experience>threshold)return true;
    if(experience+reward>=threshold)return true;
    else return false;
}

int knapsackLight(int value1, int weight1, int value2, int weight2, int maxW) {
    if(maxW<weight1 && maxW<weight2)return 0;
    int weight=0,ans=0;
    
    weight=weight1>weight2?weight1:weight2;
    if(weight1+weight2<=maxW){
        return value1+value2;
    }
    else if(weight1<=maxW || weight2<=maxW){
        if(weight1<=maxW && weight2<=maxW)
        {
            if(value1>value2)return value1;
            else return value2;
        }
        else{
            if(weight1<=maxW)return value1;
             else if(weight2<=maxW)
                    return value2;
                else return 0;
        }
    }
    return ans;
}

 int extraNumber(int a, int b, int c) {
    if(a==b)return c;
    else if(a==c)return b;
    return a;
}

boolean isInfiniteProcess(int a, int b) {
    if(b<a)return true;
    System.out.println(b-a);
    if((b-a)%2==0)return false;
    else return true;
}

boolean arithmeticExpression(int a, int b, int c) {
    if(a*b==c)
        return true;
    if((double)a/b==c){
        System.out.println(a/b);
        return true;
    }
    if(a-b==c){
          System.out.println(a +" " +b);
        return true;
    }
    if(a+b==c)return true;
    else return false;
}

boolean tennisSet(int score1, int score2) {
   if(0<=score1 && score1 <= 10 && 0 <= score2 && score2 <= 10) {
        if((score1==5||score1==6) && score2==7||
           (score2==5||score2==6) && score1==7 ||
          score1<5 && score2==6||score2<5 && score1==6)
            return true;
        else
            return false;
    }
    else return false;
}

boolean willYou(boolean young, boolean beautiful, boolean loved) {
    return !(young && beautiful) && loved||(young && beautiful) && !loved;
}

int[] metroCard(int lastNumberOfDays) {
    ArrayList<Integer> n=new ArrayList();
    if(lastNumberOfDays==28){
        n.add(31);
    }
    else if(lastNumberOfDays==30){
        n.add(31);
    }
    else {
        n.add(28);
        n.add(30);
        n.add(31);
    }
    int[] arr = new int[n.size()];
    // ArrayList to Array Conversion
        for (int i =0; i < n.size(); i++)
            arr[i] = n.get(i);
    return arr;
}

int killKthBit(int n, int k) {
  return n & ~(1 << (k-1)) ;
}

int arrayPacking(int[] a) {
    StringBuilder sb=new StringBuilder();
    for(int i=a.length-1;i>=0;i--){
    String g=Integer.toBinaryString(a[i]);
    g= String.format("%8s", g).replace(' ', '0');
    System.out.println(g);
    sb.append(g);
    }
    return Integer.parseInt(sb.toString(),2);
}

int rangeBitCount(int a, int b) {
    int sum=0;
    for(int i=a;i<=b;i++){
        String g=Integer.toBinaryString(i);
        sum+=count(g);
    }
    return sum;
}
int count(String g){
    int c=0;
    for(int i=0;i<g.length();i++){
        if(g.charAt(i)=='1')c++;
    }
    return c;
}

int mirrorBits(int a) {
    StringBuilder g=new StringBuilder(Integer.toBinaryString(a));
    g.reverse();
    return Integer.parseInt(g.toString(),2);
}

int secondRightmostZeroBit(int n) {
  return -~((n-~(n^(n+1))/2)^(n-~(n^(n+1))/2+1))/2 ;
}

int leastFactorial(int n) {
    int prod=1,i=2;
    while(prod<n){
        prod*=i++;
    }
    return prod;    
}

int countSumOfTwoRepresentations2(int n, int l, int r) {
    int b=0,c=0;
    for(int i=l;i<=r;i++){
        b=n-i;
        if(b>=l && n-i<=r && b>=i){
        c++;
        System.out.println(n-i +" " +i);
        }
    }
    return c;
}



