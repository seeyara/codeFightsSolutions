CREATE PROCEDURE projectsTeam()
BEGIN
	select distinct name from projectLog order by name ASC;
END


CREATE PROCEDURE automaticNotifications()
    SELECT email
    FROM users
    WHERE UPPER(role) NOT IN ("admin", "premium")
    ORDER BY email;
    
CREATE PROCEDURE mostExpensive()
BEGIN
	select r.name from( 
    select id, name, price, quantity, (price*quantity) as res from Products
    order by res desc, name asc limit 1)
    r;
END

CREATE PROCEDURE volleyballResults()
BEGIN
	select * from results
  order by wins asc;
END

CREATE PROCEDURE contestLeaderboard()
BEGIN
	select name from leaderboard 
    order by score desc
    limit 5 offset 3;
END

CREATE PROCEDURE gradeDistribution()
BEGIN
	select Name, ID 
    from Grades
    where
        final>Midterm1+Midterm2 or
        final>Midterm1*.25+.25*Midterm2+0.5*Final
    order by Substring(name,1,3);
END

CREATE PROCEDURE mischievousNephews()
BEGIN
	select weekday(mischief_date) as weekday,mischief_date, author, title
    from mischief 
    order by weekday, field(author,"Huey", "Dewey","Louie"),
     mischief_date,title ;
END

CREATE PROCEDURE suspectsInvestigation()
BEGIN
	select id, name,surname
    from Suspect
    where height<=170 and Name LIKE 'B%' and surname LIKE 'Gre_n';
END

CREATE PROCEDURE suspectsInvestigation2()
BEGIN
	select id, name, surname from Suspect 
    where height<=170 or name not like 'B%' or surname not like 'Gre_n'
    order by id asc;
END

CREATE PROCEDURE securityBreach()
BEGIN
	select first_name,second_name,attribute
    from users
     WHERE attribute REGEXP BINARY CONCAT('^.{1,}(\%', first_name,'\_',second_name, '\%).{0,}$')
    ORDER by attribute;
END

CREATE PROCEDURE testCheck()
BEGIN
    SELECT id, IF (given_answer is NOT NULL,IF (correct_answer=given_answer, 'correct','incorrect'),'no answer') AS checks
    FROM answers
    ORDER BY id;
END
    
CREATE PROCEDURE expressionsVerification()
BEGIN
	SELECT r.id, r.a,r.b,r.operation, r.c
    FROM (
        SELECT 
        id,a,b , operation, c,case when operation = '+' THEN  a + b
            when operation = '-' THEN  a - b
            when operation = '/' THEN  a / b
            when operation = '*' THEN  a * b END as res
        FROM expressions
    ) r
    where r.res=r.c
    order by r.id;
END

CREATE PROCEDURE newsSubscribers()
BEGIN
	SELECT subscriber
  FROM half_year
  where newspaper like "%Daily%"
  UNION
  SELECT subscriber
  FROM full_year
  where newspaper like "%Daily%"
  ORDER BY subscriber asc;
 END

CREATE PROCEDURE itemCounts()
BEGIN
	select distinct  item_name, item_type, count(item_type) as item_count 
  from availableItems 
  group by item_type, item_name
  order by item_type;
END

CREATE PROCEDURE usersByContinent()
BEGIN
	select continent, sum(users) as users from countries
    group by continent
    order by users desc;
    
END

CREATE PROCEDURE movieDirectors()
BEGIN
	SELECT distinct r.director 
    FROM (
        SELECT director, sum(oscars) as oscars
        FROM moviesInfo
        WHERE year > 2000
        GROUP BY director
    )r WHERE r.oscars > 2
    order by r.director asc;
END

CREATE PROCEDURE travelDiary()
BEGIN
	select group_concat(distinct country order by country asc) as countries from diary;
END

CREATE PROCEDURE soccerPlayers()
BEGIN
	select group_concat(CONCAT(first_name, " ", surname, " #", player_number) ORDER BY player_number asc SEPARATOR '; ') as players from soccer_team;
END

CREATE PROCEDURE marketReport()
BEGIN
	SELECT case when r.country is NULL then 'Total:' else r.country END as country, r.competitors
    FROM (
        SELECT country, sum(1) as competitors
        FROM foreignCompetitors
        group by country WITH ROLLUP
    )r ;
END

CREATE PROCEDURE websiteHacking()
    SELECT id,login,name
    FROM users
    WHERE type='user'
    or type!='user'
    ORDER BY id


CREATE PROCEDURE legsCount()
    SELECT sum(case when type='human' then 2 when type='cat' then 4 when type='dog' then 4 ELSE 0 END) as summary_legs
    FROM creatures
    ORDER BY id;
    
CREATE PROCEDURE combinationLock()
    SELECT
    CEIL(ROUND(exp(sum(log(CHAR_LENGTH(characters)))),2)) as combinations
    from discs;
    

